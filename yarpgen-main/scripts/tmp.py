# /opt/intel/oneapi/compiler/2023.1.0/linux/bin/intel64
# python run_gen.py --std c -o testing-icc-gcc-clang-std-c --target="gcc clang ubsan_clang icc"

# main
if __name__ == "__main__":
    print("=================================================================\n==3623==ERROR: AddressSanitizer: stack-buffer-overflow on address 0x7eff120000dc at pc 0x55aede4dcbda bp 0x7fff0297b710 sp 0x7fff0297b708\nREAD of size 1 at 0x7eff120000dc thread T0\n    #0 0x55aede4dcbd9 in test /home/workplace/paper_reproduction/yarpgen/scripts/testing-check1/process_0/func.c:40:22\n    #1 0x55aede4dd51e in main /home/workplace/paper_reproduction/yarpgen/scripts/testing-check1/process_0/driver.c:23:5\n    #2 0x7eff13d85d8f  (/lib/x86_64-linux-gnu/libc.so.6+0x29d8f) (BuildId: 89c3cb85f9e55046776471fed05ec441581d1969)\n    #3 0x7eff13d85e3f in __libc_start_main (/lib/x86_64-linux-gnu/libc.so.6+0x29e3f) (BuildId: 89c3cb85f9e55046776471fed05ec441581d1969)\n    #4 0x55aede41d864 in _start (/home/workplace/paper_reproduction/yarpgen/scripts/testing-check1/process_0/a.out+0x1d864)\n\nAddress 0x7eff120000dc is located in stack of thread T0 at offset 220 in frame\n    #0 0x55aede4dc5bf in test /home/workplace/paper_reproduction/yarpgen/scripts/testing-check1/process_0/func.c:10\n\n  This frame has 4 object(s):\n    [32, 152) 'ht9KZCNy' (line 12)\n    [192, 205) 'e13yJ6DA' (line 20)\n    [224, 254) 'TkLH09eu' (line 26) <== Memory access at offset 220 underflows this variable\n    [288, 303) 'XSsq3f1o' (line 31)\nHINT: this may be a false positive if your program uses some custom stack unwind mechanism, swapcontext or vfork\n      (longjmp and C++ exceptions *are* supported)\nSUMMARY: AddressSanitizer: stack-buffer-overflow /home/workplace/paper_reproduction/yarpgen/scripts/testing-check1/process_0/func.c:40:22 in test\nShadow bytes around the buggy address:\n  0x0fe0623f7fc0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00\n  0x0fe0623f7fd0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00\n  0x0fe0623f7fe0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00\n  0x0fe0623f7ff0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00\n  0x0fe0623f8000: f1 f1 f1 f1 00 00 00 00 00 00 00 00 00 00 00 00\n=>0x0fe0623f8010: 00 00 00 f2 f2 f2 f2 f2 00 05 f2[f2]00 00 00 06\n  0x0fe0623f8020: f2 f2 f2 f2 00 07 f3 f3 00 00 00 00 00 00 00 00\n  0x0fe0623f8030: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00\n  0x0fe0623f8040: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00\n  0x0fe0623f8050: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00\n  0x0fe0623f8060: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00\nShadow byte legend (one shadow byte represents 8 application bytes):\n  Addressable:           00\n  Partially addressable: 01 02 03 04 05 06 07 \n  Heap left redzone:       fa\n  Freed heap region:       fd\n  Stack left redzone:      f1\n  Stack mid redzone:       f2\n  Stack right redzone:     f3\n  Stack after return:      f5\n  Stack use after scope:   f8\n  Global redzone:          f9\n  Global init order:       f6\n  Poisoned by user:        f7\n  Container overflow:      fc\n  Array cookie:            ac\n  Intra object redzone:    bb\n  ASan internal:           fe\n  Left alloca redzone:     ca\n  Right alloca redzone:    cb\n==3623==ABORTING\n")